var express = require('express');
var session = require('express-session');
var MySQLStore = require('express-mysql-session')(session);
var bodyParser = require('body-parser');
var request = require('request');
var app = express();

var bkfd2Password = require("pbkdf2-password");
var hasher = bkfd2Password();
var passport = require('passport');
var LocalStrategy = require('passport-local').Strategy;

var mysql = require('mysql');
var connection = mysql.createConnection({
  host     : 'localhost',
  user     : 'root',
  password : '',
  database : 'tutum'
});
connection.connect();

app.locals.pretty = true;
app.set('views', './views');
app.set('view engine', 'jade');
app.use(express.static('images'));
app.use(bodyParser.urlencoded({ extended: false }));
app.use(session({
  secret: 'I4fgS7f1YQmS9NfhlFbLCBRylHJekBd9',
  resave: false,
  saveUninitialized: true,
  store: new MySQLStore({
    host: 'localhost',
    port: 3306,
    user: 'root',
    password: '',
    database: 'tutum'
  })
}));
app.use(passport.initialize());
app.use(passport.session());

passport.serializeUser(function (user, done) {
  console.log('serializeUser:', user.id);
  return done(null, user.id);
});
passport.deserializeUser(function (id, done) {
  var sql = 'SELECT * FROM users WHERE id=?';
  connection.query(sql, [id], function (err, results) {
    if (err) {
      console.log(err);
      return done(err);
    } else {
      console.log('deserializeUser:', id);
      return done(null, results[0]);
    }
  });
});
passport.use(new LocalStrategy(
  { usernameField: 'id' },
  function (username, password, done) {
    var sql = 'SELECT * FROM users WHERE id=?';
    connection.query(sql, [username], function (err, results) {
      if (err) {
        console.log(err);
        return done(err);
      }
      var user = results[0];
      if (!user) {
        console.log('Incorrect ID');
        return done(null, false);
      }
      return hasher({ password: password, salt: user.salt }, function (err, pass, salt, hash) {
        if (hash === user.password) {
          console.log('LocalStrategy: ', user);
          return done(null, user);
        } else {
          console.log('Incorrect password');
          return done(null, false);
        }
      });
    });
  }
));

app.get('/', function (req, res) {
  if(req.user) {
    req.session.save(function () {
      res.redirect('/list');
    });
  } else {
    res.render('login');
  }
});
app.post('/login', passport.authenticate('local', {
    successRedirect: '/list',
    failureRedirect: '/',
    failureFlash: false
  })
  // function (req, res) {
  //   req.session.save(function () {
  //     res.redirect('/');
  //   });
  // }
);
app.get('/signup', function (req, res) {
  res.render('signup');
});
app.post('/signup', function (req, res) {
  hasher({ password: req.body.password }, function (err, pass, salt, hash) {
    var user = {
      id: req.body.id,
      password: hash,
      salt: salt,
      name: req.body.name,
      phoneNo1: req.body.phoneNo1,
      phoneNo2: req.body.phoneNo2,
      phoneNo3: req.body.phoneNo3,
      email: req.body.email
    };
    var sql = 'INSERT INTO users SET ?';
    connection.query(sql, user, function (err, results) {
      if (err) {
        console.log(err);
        res.status(500);
      } else {
        req.login(user, function (err) {
          req.session.save(function () {
            res.redirect('/');
          });
        });
      }
    });
  });
});
app.get('/logout', function (req, res) {
  req.logout();
  req.session.save(function () {
    res.redirect('/');
  });
});

app.get('/list', function (req, res) {
  var sql = 'SELECT companies.name, invoices.invoiceNo FROM companies, invoices WHERE invoices.userId=? AND companies.code=invoices.companyCode';
  connection.query(sql, [req.user.id], function (err, results) {
    res.render('list', { user: req.user, invoices: results });
  });
});
app.get('/list/add', function (req, res) {
  var sql = 'SELECT companies.name, invoices.invoiceNo FROM companies, invoices WHERE invoices.userId=? AND companies.code=invoices.companyCode';
  connection.query(sql, [req.user.id], function (err, invoices) {
    var sql = 'SELECT * FROM companies';
    connection.query(sql, function (err, companies) {
      res.render('add', { user: req.user, invoices: invoices, companies: companies });
    });
  });
});
app.post('/list/add', function (req, res) {
  var userId = req.user.id;
  var companyCode = req.body.companyCode;
  var invoiceNo = req.body.invoiceNo;
  var sql = 'INSERT INTO invoices (userId, companyCode, invoiceNo) VALUES(?, ?, ?)';
  connection.query(sql, [userId, companyCode, invoiceNo], function (err, results) {
    req.session.save(function () {
      res.redirect('/list');
    });
  });
});

app.get('/track', function (req, res) {
  var sql = 'SELECT * FROM companies';
  connection.query(sql, function (err, results) {
    res.render('track', { companies: results });
  });
});
app.post('/track', function (req, res) {
  var t_code = req.body.companyCode;
  var t_invoice = req.body.invoiceNo;
  request({
      url: 'http://info.sweettracker.co.kr/api/v1/trackingInfo?t_key=RiFvq5sYliLkzZHjsEP8aw' +
      '&t_code=' + t_code +
      '&t_invoice=' + t_invoice,
      json: true
  }, function (error, response, body) {
    res.render('trackingInfo', { trackingInfo: body });
  });
});

app.listen(3000, function () {
  console.log('App listening on port 3000!');
});
